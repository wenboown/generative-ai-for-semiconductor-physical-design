created_by: watsonx/meta-llama/llama-3-1-70b-instruct
seed_examples:
- answer: '```python

    import gdspy


    # Define the GDS library and cell

    lib = gdspy.GdsLibrary()

    cell = lib.new_cell(''Circle_Cell'')


    # Define the layer and radius of the circle

    layer = 0

    radius = 10  # in microns, not millimeters


    # Create the circle

    circle = gdspy.Round((0, 0), radius, layer=layer, datatype=0)


    # Add the circle to the cell

    cell.add(circle)


    # Save the layout to a GDS file

    lib.write_gds(''circle.gds'')


    # Display the layout

    gdspy.LayoutViewer(lib, cell)

    ```

    Note: The radius is defined in microns, not millimeters. GDSII uses microns as
    the unit of length, so we need to convert the radius from millimeters to microns.
    If you want to keep the original unit, you can simply multiply the radius by 1000
    to convert it to microns (e.g., `radius = 10 * 1000`).'
  context: Circle.gds
  question: Write a Python code to generate GDSII for a circle on layer 0, radius
    = 10 mm, center at 0,0.
- answer: "```python\nimport gdspy\n\n# Create a library and a cell for the GDS layout\n\
    lib = gdspy.GdsLibrary()\ncell = lib.new_cell('donut')\n\n# Define the outer and\
    \ inner radius of the donut\nouter_radius = 10  # in mm\ninner_radius = 5  # in\
    \ mm\n\n# Set the maximum distance between points to make the circle smoother\n\
    max_distance = 0.01  # in mm\n\n# Create the outer ring of the donut\nouter_ring\
    \ = gdspy.Round(\n    (0, 0),  # center coordinates\n    outer_radius,  # radius\n\
    \    inner_radius,  # inner radius\n    number_of_points=int(2 * 3.14 * outer_radius\
    \ / max_distance),\n    layer=1,  # layer number\n    datatype=0  # datatype\n\
    )\n\n# Add the outer ring to the cell\ncell.add(outer_ring)\n\n# Save the design\
    \ to a GDS file\nlib.write_gds('donut.gds', unit=1.0e-6, precision=1.0e-9)\n```"
  context: Donut.gds
  question: Generate a donut shape with 10 mm outer radius and 5 mm inner radius.
    Make the circle smoother by setting max distance between point 0.01mm.
- answer: '```python

    import gdspy


    # Define the GDS library and cell

    lib = gdspy.GdsLibrary()

    cell = lib.new_cell(''Oval'')


    # Create the oval shape

    oval = gdspy.Round((0, 0), 20/2, num_points=128, layer=0)


    # Add the oval shape to the cell

    cell.add(oval)


    # Scale the oval to achieve the desired minor axis

    scale_x = 1

    scale_y = 13/20  # scaling to 13 mm minor axis

    cell.add(gdspy.Polygon(oval.polygons, layer=0).scale((scale_x, scale_y)))


    # Save the design to a GDS file

    lib.write_gds(''oval.gds'')

    ```'
  context: Oval.gds
  question: Generate an oval with major axis of 20 mm, minor axis of 13 mm, on layer
    0, center at 0,0.
- answer: '```python

    import gdspy


    # Define the GDS library and cell

    lib = gdspy.GdsLibrary()

    cell = lib.new_cell(''square_design'')


    # Define the layer for the square (layer 1, datatype 0)

    layer = (1, 0)


    # Create the square with width 10 mm, placing the lower right corner at (0, 0)

    square = gdspy.Rectangle((0, 0), (10, 10), layer=layer)


    # Add the square to the cell

    cell.add(square)


    # Save the design to a GDS file

    lib.write_gds(''square_design.gds'', unit=1.0e-6, precision=1.0e-9)

    ```'
  context: Square.gds
  question: Generate a square with width 10 mm, put lower right corner of the square
    at 0,0.
- answer: "```python\nimport gdspy\n\n# Define the GDS library and cell\nlib = gdspy.GdsLibrary()\n\
    cell = lib.new_cell('triangle')\n\n# Define the triangle vertices\nx = 0\ny =\
    \ 0\nedge_length = 10\ntriangle_vertices = [(x - edge_length/2, y - edge_length/(2*3**0.5)),\
    \ \n                     (x + edge_length/2, y - edge_length/(2*3**0.5)), \n \
    \                    (x, y + edge_length/3**0.5)]\n\n# Create the triangle as\
    \ a polygon\ntriangle = gdspy.Polygon(triangle_vertices, layer=1)\n\n# Add the\
    \ triangle to the cell\ncell.add(triangle)\n\n# Save the design to a GDS file\n\
    lib.write_gds('triangle.gds')\n```"
  context: Triangle.gds
  question: Generate a triangle with each edge 10 mm, center at 0,0.
- answer: "```python\nimport gdspy\nimport math\n\n# Define the GDS library and cell\n\
    lib = gdspy.Library()\ncell = lib.cell(\"Heptagon_Cell\")\n\n# Define the Heptagon\
    \ parameters\ncenter = (0, 0)\nedge_length = 10\nnum_sides = 7\n\n# Calculate\
    \ the angle between each vertex\nangle = 2 * math.pi / num_sides\n\n# Define the\
    \ vertices of the Heptagon\nvertices = []\nfor i in range(num_sides):\n    x =\
    \ center[0] + edge_length * math.cos(i * angle)\n    y = center[1] + edge_length\
    \ * math.sin(i * angle)\n    vertices.append((x, y))\n\n# Create the Heptagon\
    \ polygon\nheptagon = gdspy.Polygon(vertices)\n\n# Add the Heptagon to the cell\n\
    cell.add(heptagon)\n\n# Save the design to a GDS file\nlib.write_gds(\"heptagon.gds\"\
    )\n```"
  context: Heptagon.gds
  question: Generate a Heptagon with each edge 10 mm, center at 0,0.
- answer: "```python\nimport gdspy\nimport math\n\n# Define the library and cell for\
    \ the GDS layout\nlib = gdspy.GdsLibrary()  # Create a new library\ncell = lib.new_cell(\"\
    octagon\")  # Create a new cell in the library\n\n# Define the octagon parameters\n\
    edge_length = 10\nnum_edges = 8\ncenter_x, center_y = 0, 0\n\n# Calculate the\
    \ coordinates of the octagon\nangle_step = 2 * math.pi / num_edges\npoints = []\n\
    for i in range(num_edges):\n    angle = i * angle_step\n    x = center_x + edge_length\
    \ / 2 * math.cos(angle)\n    y = center_y + edge_length / 2 * math.sin(angle)\n\
    \    points.append((x, y))\n\n# Create the octagon polygon\noctagon = gdspy.Polygon(points)\n\
    \n# Add the octagon to the cell\ncell.add(octagon)\n\n# Save the design to a GDS\
    \ file\nlib.write_gds(\"octagon.gds\")\n```\n\nNote: This code will generate an\
    \ octagon with its center at (0,0) and each edge length of 10 mm. The `gdspy`\
    \ library is used to create and manipulate the GDS layout. The `Polygon` function\
    \ is used to create the octagon shape, and the `add` method is used to add it\
    \ to the cell. Finally, the `write_gds` method is used to save the design to a\
    \ GDS file."
  context: Octagon.gds
  question: Generate an Octagon with each edge 10 mm, center at 0,0.
- answer: '```python

    import gdspy


    # Define the library and cell for the GDS layout

    lib = gdspy.GdsLibrary()

    cell = lib.new_cell(''Trapezoid'')


    # Parse the user''s design specifications

    upper_edge = 10  # mm

    lower_edge = 20  # mm

    height = 8  # mm

    center_x = 0  # mm

    center_y = 0  # mm


    # Calculate the coordinates of the trapezoid''s vertices

    point1 = (center_x - (upper_edge / 2), center_y + (height / 2))

    point2 = (center_x + (upper_edge / 2), center_y + (height / 2))

    point3 = (center_x + (lower_edge / 2), center_y - (height / 2))

    point4 = (center_x - (lower_edge / 2), center_y - (height / 2))


    # Create the trapezoid polygon

    trap = gdspy.Polygon([point1, point2, point3, point4])


    # Add the trapezoid to the cell

    cell.add(trap)


    # Save the design to a GDS file

    lib.write_gds(''trapezoid.gds'')

    ```'
  context: Trapezoid.gds
  question: Generate a Trapezoid with upper edge 10 mm, lower edge 20 mm, height 8
    mm, center at 0,0.
- answer: "```python\nimport gdspy\n\n# Create a new GDS library\nlib = gdspy.GdsLibrary()\n\
    \n# Create a new cell for the arrow\ncell = lib.new_cell('Arrow')\n\n# Define\
    \ the coordinates for the arrow\nx1, y1 = 0, 0  # starting point\nlength = 10\
    \  # length of the arrow\nhead_width = 2  # width of the head\nhead_length = 2\
    \  # length of the head\nbody_width = head_width / 3  # width of the body\n\n\
    # Create the arrow head\nhead_poly = gdspy.Polygon([(x1, y1), (x1 + head_length,\
    \ y1 - head_width/2), (x1 + head_length, y1 + head_width/2)], layer=0)\ncell.add(head_poly)\n\
    \n# Create the arrow body\nbody_poly = gdspy.Polygon([(x1 + head_length, y1 -\
    \ body_width/2), (x1 + head_length, y1 + body_width/2),\n                    \
    \       (x1 + length - head_length, y1 + body_width/2), (x1 + length - head_length,\
    \ y1 - body_width/2)],\n                           layer=0)\ncell.add(body_poly)\n\
    \n# Save the design to a GDS file\nlib.write_gds('arrow.gds')\n```"
  context: Arrow.gds
  question: Generate an Arrow pointing to the right with length 10 mm, make the body
    1/3 width of the head, start at 0,0.
- answer: "```python\nimport gdspy\n\n# Define the GDS library and cell\nlib = gdspy.GdsLibrary()\n\
    cell = lib.new_cell('square_array')\n\n# Define the square size and spacing\n\
    square_size = (5, 5)\nspacing = (20, 20)\n\n# Calculate the number of columns\
    \ and rows\nnum_cols = 10\nnum_rows = 10\n\n# Initialize the origin (lower left\
    \ corner of the upper right square)\norigin = (0, 0)\n\n# Iterate over the columns\
    \ and rows\nfor col in range(num_cols):\n    for row in range(num_rows):\n   \
    \     # Calculate the position of the square\n        pos = (origin[0] + col *\
    \ (square_size[0] + spacing[0]), \n               origin[1] + row * (square_size[1]\
    \ + spacing[1]))\n        \n        # Create a square with the calculated position\
    \ and size\n        square = gdspy.Rectangle(pos, (pos[0] + square_size[0], pos[1]\
    \ + square_size[1]))\n        \n        # Add the square to the cell\n       \
    \ cell.add(square)\n\n# Save the GDS file\nlib.write_gds('square_array.gds')\n\
    ```\nNote: This code assumes that the origin (0,0) is at the lower left corner\
    \ of the upper right square, and the squares are arranged in a grid with the specified\
    \ size and spacing. The `gdspy` library takes care of the geometric relationships\
    \ and layout accuracy."
  context: SquareArray.gds
  question: Generate a square array with 5*5 mm square, for 10 columns and 10 rows,
    each 20 mm apart, the lower left corner of the upper right square is at 0,0.
- answer: "```python\nimport gdspy\n\n# Define the grid parameters\nlayer = 1\ndatatype\
    \ = 4\ngrid_size = 5  # in micrometers\ntotal_width = 200  # in micrometers\n\
    total_height = 400  # in micrometers\nx_offset = 100  # in nanometers\ny_offset\
    \ = 800  # in nanometers\n\n# Define the grid dimensions in micrometers\ngrid_width\
    \ = total_width / grid_size\ngrid_height = total_height / grid_size\n\n# Create\
    \ a new GDS library and cell\nlib = gdspy.GdsLibrary()\ncell = lib.new_cell('grid')\n\
    \n# Define the grid elements\nfor i in range(int(grid_height)):\n    for j in\
    \ range(int(grid_width)):\n        x = x_offset + j * grid_size * 1000  # convert\
    \ um to nm\n        y = y_offset - i * grid_size * 1000  # convert um to nm\n\
    \        rect = gdspy.Rectangle((x, y), (x + grid_size * 1000, y - grid_size *\
    \ 1000), layer=layer, datatype=datatype)\n        cell.add(rect)\n\n# Save the\
    \ GDS file\nlib.write_gds('grid.gds')\n```"
  context: Grid.gds
  question: "Draw the GDSII for a grid: Grid on Layer 1, DATATYPE 4, 5 \xB5m grid,\
    \ and total width is 200 \xB5m and height is 400 \xB5m, placed at coordinates\
    \ (100,800) nanometers."
- answer: "```python\nimport gdspy\n\n# Define the GDS library and cell\nlib = gdspy.GdsLibrary()\n\
    cell = lib.new_cell('serpentine_pattern')\n\n# Define the path width, number of\
    \ turns, segment length, and layer/datatype\npath_width = 1\nnum_turns = 15\n\
    segment_length = 50\nlayer = 2\ndatatype = 6\n\n# Initialize the current position\n\
    x, y = 0, 0\n\n# Create the serpentine pattern\nfor i in range(num_turns):\n \
    \   # Draw the horizontal segment\n    points = [(x, y), (x + segment_length,\
    \ y)]\n    cell.add(gdspy.Path(path_width, points, layer=layer, datatype=datatype))\n\
    \n    # Update the current position\n    x += segment_length\n    y += path_width\n\
    \n    # Draw the vertical segment\n    points = [(x, y), (x, y + segment_length)]\n\
    \    cell.add(gdspy.Path(path_width, points, layer=layer, datatype=datatype))\n\
    \n    # Update the current position\n    y += segment_length\n    x -= segment_length\n\
    \n    # Repeat the pattern for the remaining turns\n    if i < num_turns - 1:\n\
    \        # Draw the horizontal segment\n        points = [(x, y), (x - segment_length,\
    \ y)]\n        cell.add(gdspy.Path(path_width, points, layer=layer, datatype=datatype))\n\
    \n        # Update the current position\n        x -= segment_length\n       \
    \ y -= path_width\n\n        # Draw the vertical segment\n        points = [(x,\
    \ y), (x, y - segment_length)]\n        cell.add(gdspy.Path(path_width, points,\
    \ layer=layer, datatype=datatype))\n\n        # Update the current position\n\
    \        y -= segment_length\n        x += segment_length\n\n# Save the design\
    \ to a GDS file\nlib.write_gds('serpentine_pattern.gds')\n```"
  context: Serpentine.gds
  question: "Generate a serpentine pattern with a path width of 1 \xB5m, 15 turns,\
    \ each segment being 50 \xB5m long and tall, starting at (0,0), on layer 2, datatype\
    \ 6."
- answer: "```python\nimport gdspy\n\n# Step 1: Define the GDS library and cell\n\
    lib = gdspy.Library()\ncell = lib.new_cell(\"Square_with_Rounded_Corners\")\n\n\
    # Step 2: Define the parameters\nsquare_size = (10, 10)  # mm\ncorner_radius =\
    \ 1  # mm\n\n# Step 3: Draw the square with rounded corners\npoints = [\n    (-square_size[0]/2\
    \ + corner_radius, -square_size[1]/2),\n    (-square_size[0]/2, -square_size[1]/2\
    \ + corner_radius),\n    (-square_size[0]/2, square_size[1]/2 - corner_radius),\n\
    \    (-square_size[0]/2 + corner_radius, square_size[1]/2),\n    (square_size[0]/2\
    \ - corner_radius, square_size[1]/2),\n    (square_size[0]/2, square_size[1]/2\
    \ - corner_radius),\n    (square_size[0]/2, -square_size[1]/2 + corner_radius),\n\
    \    (square_size[0]/2 - corner_radius, -square_size[1]/2)\n]\n\npoly = gdspy.Polygon(points,\
    \ layer=1, datatype=1)\ncell.add(poly)\n\n# Step 4: Add corner circles for rounding\n\
    for point, angle in [\n    ((-square_size[0]/2, -square_size[1]/2), 0),\n    ((-square_size[0]/2,\
    \ square_size[1]/2), 90),\n    ((square_size[0]/2, square_size[1]/2), 180),\n\
    \    ((square_size[0]/2, -square_size[1]/2), 270)\n]:\n    circle = gdspy.Round(point,\
    \ corner_radius, number_of_points=128, layer=1, datatype=1)\n    cell.add(circle)\n\
    \n# Step 5: Save the design to a GDS file\nlib.write_gds('square_with_rounded_corners.gds')\n\
    ```"
  context: RoundedSquare.gds
  question: Draw a 10*10 mm square, and do corner rounding for each corner with r=1
    mm.
- answer: '```python

    import gdspy


    # Define the library and cell for the GDS layout

    lib = gdspy.GdsLibrary()

    cell = lib.new_cell(''ibm_research_layout'')


    # Define the rectangle dimensions and coordinates

    rect_width = 30e3  # 30 mm to micron conversion

    rect_height = 10e3  # 10 mm to micron conversion

    rect_x = -rect_width/2

    rect_y = -rect_height/2


    # Create the rectangle on layer 0

    rect = gdspy.Rectangle((rect_x, rect_y), (rect_x + rect_width, rect_y + rect_height),
    layer=0)

    cell.add(rect)


    # Define the text properties

    text_string = ''IBM Research''

    text_layer = 1

    text_size = 5e3  # 5 mm to micron conversion

    text_x = -text_size * len(text_string) / 4

    text_y = -text_size / 2 + rect_y + rect_height/2


    # Create the text on layer 1

    text = gdspy.Text(text_string, (text_x, text_y), size=text_size, layer=text_layer,
    font=''ROMAN'')

    cell.add(text)


    # Save the design to a GDS file

    lib.write_gds(''ibm_research_layout.gds'')

    ```


    This code creates a new GDS library and cell, defines a 30x10 mm rectangle on
    layer 0, and adds a text element with the string "IBM Research" at the center
    of the rectangle on layer 1. The design is then saved to a GDS file named `ibm_research_layout.gds`.'
  context: RectangleWithText.gds
  question: Generate a GDS with a 30*10 mm rectangle on layer 0 with a text "IBM Research"
    at the center of the rectangle. Put the text on layer 1.
- answer: "```python\nimport gdspy\nimport numpy as np\n\n# Parse the user's design\
    \ specifications\nr_func = lambda t: np.exp(-0.1 * t)\nt_start = 0\nt_end = 6\
    \ * np.pi\nline_width = 1\n\n# Create a new library and cell for the GDS layout\n\
    lib = gdspy.Library()\ncell = lib.new_cell('spiral')\n\n# Generate an array of\
    \ t values\nt = np.linspace(t_start, t_end, 1000)\n\n# Calculate the corresponding\
    \ r values\nr = r_func(t)\n\n# Calculate the x and y coordinates of the spiral\n\
    x = r * np.cos(t)\ny = r * np.sin(t)\n\n# Create the spiral path\npath = gdspy.Path(line_width,\
    \ [(x[0], y[0])])\nfor i in range(1, len(x)):\n    path.segment([(x[i], y[i])],\
    \ final_width=line_width)\n\n# Add the path to the cell\ncell.add(path)\n\n# Save\
    \ the design to a GDS file\nlib.write_gds('spiral.gds')\n```"
  context: Spiral.gds
  question: Generate a Parametric spiral with r(t) = e^(-0.1t), for 0 <= t <= 6pi,
    line width 1.
- answer: "```python\nimport gdspy\n\n# Define the library and cell for the GDS layout\n\
    lib = gdspy.GdsLibrary()\ncell = lib.new_cell(\"microfluidic_chip\")\n\n# Layer\
    \ 0: Bulk of the chip (30 * 20 mm rectangle)\nbulk_layer = 0\nbulk_rect = gdspy.Rectangle((0,\
    \ 0), (30e3, 20e3), layer=bulk_layer)\ncell.add(bulk_rect)\n\n# Layer 2: Via level\
    \ (two circular vias with 2 mm radius, 20 mm apart horizontally)\nvia_layer =\
    \ 2\nvia_radius = 2e3  # 2 mm\nvia_center1 = (5e3, 10e3)  # 5 mm from the left\
    \ edge, 10 mm from the bottom edge\nvia_center2 = (25e3, 10e3)  # 25 mm from the\
    \ left edge, 10 mm from the bottom edge\nvia1 = gdspy.Round(via_center1, via_radius,\
    \ layer=via_layer, number_of_points=32)\nvia2 = gdspy.Round(via_center2, via_radius,\
    \ layer=via_layer, number_of_points=32)\ncell.add(via1)\ncell.add(via2)\n\n# Layer\
    \ 3: Channel level (rectangular shaped channel connecting the two vias at their\
    \ center)\nchannel_layer = 3\nchannel_width = 1e3  # 1 mm\nchannel_rect = gdspy.Rectangle((via_center1[0]\
    \ - channel_width/2, via_center1[1] - channel_width/2), \n                   \
    \            (via_center2[0] + channel_width/2, via_center2[1] + channel_width/2),\
    \ \n                               layer=channel_layer)\ncell.add(channel_rect)\n\
    \n# Save the design to a GDS file\nlib.write_gds(\"microfluidic_chip.gds\")\n\
    ```"
  context: MicrofluidicChip.gds
  question: Draw a design of a microfluidic chip. On layer 0, it is the bulk of the
    chip. It is a 30 * 20 mm rectangle. On layer 2 (via level), draw two circular
    vias, with 2 mm radius, and 20 mm apart horizontally. On layer 3 (channel level),
    draw a rectangular shaped channel (width = 1 mm) that connects the two vias at
    their center.
- answer: "```python\nimport gdspy\n\n# Step 1: Define the GDS library and cell\n\
    lib = gdspy.GdsLibrary()\ncell = lib.new_cell('design')\n\n# Step 2: Define the\
    \ layers\nvia_layer = lib.new_layer(1, 'via', color=(255, 255, 0))  # yellow\n\
    metal_layer = lib.new_layer(2, 'metal', color=(0, 0, 255))  # blue\npad_layer\
    \ = lib.new_layer(3, 'pad', color=(255, 0, 0))  # red\n\n# Step 3: Define the\
    \ via and pad radius\nvia_radius = 10\npad_radius = 30\n\n# Step 4: Define the\
    \ metal connection width and length\nmetal_width = 40\nmetal_length = 600\n\n\
    # Step 5: Define the positions of the vias\nvia1_pos = (50, 150)\nvia2_pos = (550,\
    \ 150)\n\n# Step 6: Calculate the metal connection coordinates\nmetal_x1 = via1_pos[0]\
    \ - 50\nmetal_x2 = via2_pos[0] + 50\nmetal_y1 = via1_pos[1] - metal_width / 2\n\
    metal_y2 = via1_pos[1] + metal_width / 2\n\n# Step 7: Create the vias, pads, and\
    \ metal connection\nvia1 = gdspy.Round(\n    via1_pos,\n    via_radius,\n    number_of_points=32,\n\
    \    layer=via_layer\n)\nvia2 = gdspy.Round(\n    via2_pos,\n    via_radius,\n\
    \    number_of_points=32,\n    layer=via_layer\n)\npad1 = gdspy.Round(\n    via1_pos,\n\
    \    pad_radius,\n    number_of_points=32,\n    layer=pad_layer\n)\npad2 = gdspy.Round(\n\
    \    via2_pos,\n    pad_radius,\n    number_of_points=32,\n    layer=pad_layer\n\
    )\nmetal = gdspy.Rectangle(\n    (metal_x1, metal_y1),\n    (metal_x2, metal_y2),\n\
    \    layer=metal_layer\n)\n\n# Step 8: Add the elements to the cell\ncell.add(via1)\n\
    cell.add(via2)\ncell.add(pad1)\ncell.add(pad2)\ncell.add(metal)\n\n# Step 9: Save\
    \ the design to a GDS file\nlib.write_gds('design.gds')\n```"
  context: ViaConnection.gds
  question: 'Create a design with three layers: via layer (yellow), metal layer (blue),
    and pad layer (red). The via radius is 10 units, pad radius is 30 units, and metal
    connection width is 40 units with a total length of 600 units. Position the first
    via at (50, 150) and the second via at (550, 150). Ensure the metal connection
    fully covers the vias and leaves a margin of 10 units between the edge of the
    metal and the pads. Leave a space of 50 units between the vias and the edges of
    the metal connection.'
- answer: "```python\nimport gdspy\n\n# Define the GDS library and cell\nlib = gdspy.GdsLibrary()\n\
    cell = lib.new_cell(\"fiducial_circle\")\n\n# Define the circle parameters\ncircle_radius\
    \ = 3200  # microns\n\n# Create the circle\ncircle = gdspy.Round(\n    (0, 0),\
    \  # center coordinates\n    circle_radius,\n    tolerance=0.001,\n    max_points=100,\n\
    \    layer=1,\n    datatype=0,\n)\ncell.add(circle)\n\n# Define the fiducial mark\
    \ parameters\nfiducial_length = 200  # microns\nfiducial_width = 200  # microns\n\
    fiducial_spacing = 200  # microns\n\n# Define the annotation parameters\nannotation_font\
    \ = \"Arial\"\nannotation_size = 100  # microns\n\n# Create the fiducial marks\
    \ and annotations\nalpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nfor i in range(26):\n\
    \    row = alpha[i]\n    for j in range(13):\n        column = str(j + 1)\n  \
    \      x = -1600 + j * fiducial_spacing\n        y = 800 - i * fiducial_spacing\n\
    \n        # Create the fiducial mark\n        fiducial = gdspy.Polygon([\n   \
    \         (x - fiducial_length / 2, y),\n            (x + fiducial_length / 2,\
    \ y),\n            (x, y - fiducial_length / 2),\n            (x, y + fiducial_length\
    \ / 2),\n        ], layer=2, datatype=0)\n        cell.add(fiducial)\n\n     \
    \   # Create the annotation\n        annotation = gdspy.Text(\n            f\"\
    {row}{column}\",\n            x=x + fiducial_length / 2 + 50,\n            y=y,\n\
    \            font=annotation_font,\n            size=annotation_size,\n      \
    \      layer=3,\n            datatype=0,\n        )\n        cell.add(annotation)\n\
    \n        # Create the fiducial mark for the second half of the column\n     \
    \   fiducial = gdspy.Polygon([\n            (x - fiducial_length / 2, y),\n  \
    \          (x + fiducial_length / 2, y),\n            (x, y - fiducial_length\
    \ / 2),\n            (x, y + fiducial_length / 2),\n        ], layer=2, datatype=0)\n\
    \        cell.add(gdspy.Translate(fiducial, (0, -1600)))\n\n        # Create the\
    \ annotation for the second half of the column\n        annotation = gdspy.Text(\n\
    \            f\"{row}{column}\",\n            x=x + fiducial_length / 2 + 50,\n\
    \            y=y - 1600,\n            font=annotation_font,\n            size=annotation_size,\n\
    \            layer=3,\n            datatype=0,\n        )\n        cell.add(annotation)\n\
    \n# Save the GDS file\nlib.write_gds(\"fiducial_circle.gds\")\n```"
  context: FiducialCircle.gds
  question: 'Draw a 3.2 mm circle, with fiducial marks inside. The fiducial marks
    should be a "+" sign, with equal length and width. Each marker should be 200 um
    apart. There will be annotations next to each marker. Row: A -> Z, column: start
    from 1.'
- answer: '```python

    import gdspy


    # Step 1: Create a new library and cell for the GDS layout

    lib = gdspy.GdsLibrary()

    cell = lib.new_cell(''Layout'')


    # Step 2: Define the active region

    active_region = gdspy.Rectangle((0, 0), (10, 5))


    # Step 3: Create the polysilicon gate

    gate_width = 1

    gate_center_x = 5  # Center of the active region

    gate = gdspy.Rectangle((gate_center_x - gate_width/2, 0), (gate_center_x + gate_width/2,
    5))


    # Step 4: Add contact holes

    contact_size = 1

    contact.spacing = 1

    contact1 = gdspy.Rectangle((gate_center_x - gate_width/2 - contact_size - contact_spacing,
    1), (gate_center_x - gate_width/2 - contact_spacing, 2))

    contact2 = gdspy.Rectangle((gate_center_x + gate_width/2 + contact_spacing, 1),
    (gate_center_x + gate_width/2 + contact_size + contact_spacing, 2))


    # Step 5: Add elements to the cell

    cell.add(active_region)

    cell.add(gate)

    cell.add(contact1)

    cell.add(contact2)


    # Step 6: Save the design to a GDS file

    lib.write_gds(''layout.gds'')

    ```'
  context: BasicLayout.gds
  question: "1. Draw a rectangular active region with dimensions 10 \xB5m x 5 \xB5\
    m.\n2. Place a polysilicon gate that crosses the active region vertically at its\
    \ center, with a width of 1 \xB5m.\n3. Add two square contact holes, each 1 \xB5\
    m x 1 \xB5m, positioned 1 \xB5m away from the gate on either side along the active\
    \ region."
- answer: "```python\nimport gdspy\n\n# Define the design specifications\nunit = 1.0e-6\
    \  # Convert dimensions from microns to meters\nactive_region_width = 20 * unit\n\
    active_region_height = 5 * unit\nactive_region_spacing = 5 * unit\npoly_gate_width\
    \ = 0.5 * unit\ncontact_hole_size = 1 * unit\n\n# Define the library and cell\
    \ for the GDS layout\nlib = gdspy.GdsLibrary()\ncell = lib.new_cell(\"layout\"\
    )\n\n# Create the three active regions\nactive_regions = []\nfor i in range(3):\n\
    \    x = i * (active_region_width + active_region_spacing)\n    active_region\
    \ = gdspy.Rectangle([x, 0], [x + active_region_width, active_region_height])\n\
    \    active_regions.append(active_region)\n    cell.add(active_regions[-1])\n\n\
    # Create the polysilicon gate pattern\npoly_gate_pattern = []\nfor i in range(5):\n\
    \    x = i * poly_gate_width\n    poly_gate_line = gdspy.Rectangle([x, 0], [x\
    \ + poly_gate_width, 10 * unit], width=poly_gate_width)\n    poly_gate_pattern.append(poly_gate_line)\n\
    \    cell.add(poly_gate_pattern[-1])\n    y = i * poly_gate_width\n    poly_gate_line\
    \ = gdspy.Rectangle([0, y], [10 * unit, y + poly_gate_width], width=poly_gate_width)\n\
    \    poly_gate_pattern.append(poly_gate_line)\n    cell.add(poly_gate_pattern[-1])\n\
    \n# Create the contact holes\ncontact_holes = []\nfor i in range(3):\n    for\
    \ j in range(5):\n        x = i * (active_region_width + active_region_spacing)\
    \ + active_region_width / 2\n        y = j * poly_gate_width + poly_gate_width\
    \ / 2\n        contact_hole = gdspy.Rectangle([x - contact_hole_size / 2, y -\
    \ contact_hole_size / 2], \n                                       [x + contact_hole_size\
    \ / 2, y + contact_hole_size / 2])\n        contact_holes.append(contact_hole)\n\
    \        cell.add(contact_holes[-1])\n\n# Save the design to a GDS file\nlib.write_gds(\"\
    layout.gds\", cells=[cell], unit=1.0e-6, precision=1.0e-9)\n```"
  context: ComplexLayout.gds
  question: "1. Draw three rectangular active regions with dimensions 20 \xB5m x 5\
    \ \xB5m, positioned horizontally with 5 \xB5m spacing between them.\n2. Create\
    \ a complex polysilicon gate pattern consisting of multiple vertical and horizontal\
    \ lines, with widths of 0.5 \xB5m, forming a grid-like structure.\n3. Add several\
    \ contact holes (each 1 \xB5m x 1 \xB5m) positioned at the intersections of the\
    \ polysilicon gate pattern and the active regions."
- answer: "```python\nimport numpy as np\nimport gdspy\n\n# Parse the user's design\
    \ specifications\ngap_size = 225  # nm\npillar_size = 400  # nm\nnum_pillars =\
    \ 30\nrow_shift_fraction = 0.1\ninlet_outlet_diameter = 40  # \xB5m\nbus_size\
    \ = (20, 50)  # \xB5m\n\n# Define the library and cell for the GDS layout\nlib\
    \ = gdspy.GdsLibrary()\ncell = lib.new_cell('dld_chip')\n\n# Create the channel\
    \ with pillars\nchannel_width = num_pillars * (pillar_size + gap_size)\nchannel_length\
    \ = 100  # arbitrary length, can be adjusted\n\n# Calculate the row shift\nrow_shift\
    \ = row_shift_fraction * (pillar_size + gap_size)\n\n# Create the pillar array\n\
    for i in range(num_pillars):\n    for j in range(int(channel_length / (pillar_size\
    \ + gap_size))):\n        x = i * (pillar_size + gap_size)\n        y = j * (pillar_size\
    \ + gap_size) + (i % 2) * row_shift\n        pillar = gdspy.Round((x, y), pillar_size\
    \ / 2, number_of_points=64)\n        cell.add(pillar)\n\n# Create the channel\
    \ boundary\nchannel_boundary = gdspy.Rectangle((0, 0), (channel_width, channel_length))\n\
    cell.add(channel_boundary)\n\n# Create the inlet and outlet\ninlet = gdspy.Round((0,\
    \ channel_length / 2), inlet_outlet_diameter / 2, number_of_points=64)\noutlet\
    \ = gdspy.Round((channel_width, channel_length / 2), inlet_outlet_diameter / 2,\
    \ number_of_points=64)\ncell.add(inlet)\ncell.add(outlet)\n\n# Create the bus\
    \ to connect the inlet and outlet to the channel\nbus_x = channel_width / 2\n\
    bus_y = channel_length / 2\nbus = gdspy.Rectangle((bus_x - bus_size[0] / 2, bus_y\
    \ - bus_size[1] / 2), (bus_x + bus_size[0] / 2, bus_y + bus_size[1] / 2))\ncell.add(bus)\n\
    \n# Save the design to a GDS file\nlib.write_gds('dld_chip.gds', unit=1e-6, precision=1e-9)\n\
    ```"
  context: DLDChip.gds
  question: "Draw a deterministic lateral displacement chip - include channel that\
    \ can hold the array has gap size = 225 nm, circular pillar size = 400 nm, width\
    \ = 30 pillars, row shift fraction = 0.1, add an inlet and outlet 40 \xB5m diameter\
    \ before and after the channel, use a 20*50 \xB5m bus to connect the inlet and\
    \ outlet to the channel."
- answer: "```python\nimport gdspy\n\n# Create a new library and cell for the FinFET\
    \ design\nlib = gdspy.GdsLibrary()\ncell = lib.new_cell('FinFET')\n\n# Define\
    \ the layers for the fin, gate, and source/drain regions\nfin_layer = (1, 0)\n\
    gate_layer = (2, 0)\nsdt_layer = (3, 0)\n\n# Define the FinFET dimensions\nfin_width\
    \ = 0.1\nfin_height = 0.2\nfin_length = 1.0\ngate_length = 0.1\nsdt_length = 0.4\n\
    sdt_ext = 0.2\n\n# Create the fin\nfin = gdspy.Rectangle(\n    (0, 0),\n    (fin_length,\
    \ fin_height),\n    layer=fin_layer\n)\ncell.add(fin)\n\n# Create the gate\ngate\
    \ = gdspy.Rectangle(\n    (fin_length / 2 - gate_length / 2, -0.05),\n    (fin_length\
    \ / 2 + gate_length / 2, fin_height + 0.05),\n    layer=gate_layer\n)\ncell.add(gate)\n\
    \n# Create the source and drain regions\nsdt_src = gdspy.Rectangle(\n    (-sdt_ext,\
    \ 0),\n    (sdt_length + sdt_ext, fin_height),\n    layer=sdt_layer\n)\ncell.add(sdt_src)\n\
    \nsdt_drn = gdspy.Rectangle(\n    (fin_length - sdt_length - sdt_ext, 0),\n  \
    \  (fin_length + sdt_ext, fin_height),\n    layer=sdt_layer\n)\ncell.add(sdt_drn)\n\
    \n# Save the design to a GDS file\nlib.write_gds('FinFET.gds')\n```"
  context: FinFET.gds
  question: "Draw a FinFET with the following specifications:\n- Fin width: 0.1 \xB5\
    m\n- Fin height: 0.2 \xB5m\n- Fin length: 1.0 \xB5m\n- Gate length: 0.1 \xB5m\n\
    - Source/drain length: 0.4 \xB5m\n- Source/drain extension beyond the fin: 0.2\
    \ \xB5m\nUse separate layers for the fin, gate, and source/drain regions."
- answer: '```python

    import gdspy

    import numpy as np


    # Define the library and cell for the GDS layout

    lib = gdspy.GdsLibrary()

    cell = lib.new_cell("hexagon")


    # Define the center of the hexagon

    center = (0, 0)


    # Define the edge length of the hexagon

    edge_length = 10


    # Calculate the coordinates of the hexagon vertices

    angle = np.linspace(0, 2*np.pi, 6, endpoint=False)

    vertices = np.column_stack((np.cos(angle), np.sin(angle))) * edge_length / 2

    vertices = vertices + center


    # Create the hexagon polygon

    hexagon = gdspy.Polygon(vertices, layer=1, datatype=[0, 0])


    # Add the hexagon to the cell

    cell.add(hexagon)


    # Save the design to a GDS file

    lib.write_gds("hexagon.gds")

    ```'
  context: Hexagon.gds
  question: Generate a regular hexagon with each edge 10 mm, center at 0,0.
- answer: "```python\nimport gdspy\nimport math\n\n# Define the library and cell for\
    \ the GDS layout\nlib = gdspy.GdsLibrary()\ncell = lib.new_cell(\"Pentagon\")\n\
    \n# Calculate the coordinates of the pentagon vertices\nn_sides = 5\nside_length\
    \ = 10\nangle = 2 * math.pi / n_sides\nvertices = []\nfor i in range(n_sides):\n\
    \    x = side_length * math.cos(i * angle)\n    y = side_length * math.sin(i *\
    \ angle)\n    vertices.append((x, y))\n\n# Create the polygon\npentagon = gdspy.Polygon(vertices)\n\
    \n# Add the polygon to the cell\ncell.add(pentagon)\n\n# Save the design to a\
    \ GDS file\nlib.write_gds(\"pentagon.gds\")\n```\nThis code generates a regular\
    \ pentagon with each edge of length 10 mm, centered at (0, 0) and saves it to\
    \ a GDS file named \"pentagon.gds\"."
  context: Pentagon.gds
  question: Generate a regular pentagon with each edge 10 mm, center at 0,0.
- answer: '```python

    import gdspy


    # Define the library and cell for the GDS layout

    lib = gdspy.GdsLibrary()

    cell = lib.new_cell(''HelloGDS'')


    # Create a text element with the specified properties

    text = gdspy.Text(''Hello, GDS!'', 5, (0, 0), layer=1, font=''Roman'')


    # Add the text element to the cell

    cell.add(text)


    # Save the design to a GDS file

    lib.write_gds(''HelloGDS.gds'')

    ```'
  context: Text.gds
  question: Generate a GDS file with the text "Hello, GDS!" centered at (0,0), with
    a height of 5 mm, on layer 1.
task_description: Generate Python code for GDS shapes using watsonx/meta-llama/llama-3-1-70b-instruct
version: 2
